"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spawn = spawn;

var _fly = require("../fly");

var _fly2 = _interopRequireDefault(_fly);

var _path = require("path");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [spawn].map(regeneratorRuntime.mark);

/**
  Create a new Fly instance.
  @param {String} path to a flyfile
  @return {Fly} fly instance âœˆ
 */
function spawn(path) {
  var hook = arguments.length <= 1 || arguments[1] === undefined ? _utils.bind : arguments[1];
  var file;
  return regeneratorRuntime.wrap(function spawn$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _utils.find)(path, hook);

        case 2:
          file = _context.sent;
          return _context.abrupt("return", new _fly2.default({
            file: file, host: require(file), plugins: getPlugins((0, _path.dirname)(file), hook)
          }));

        case 4:
        case "end":
          return _context.stop();
      }
    }
  }, _marked[0], this);
}
/**
  Load and return plugins in path/node_modules
  Bind require to compile plugins on the fly.
*/
function getPlugins(path) {
  var hook = arguments.length <= 1 || arguments[1] === undefined ? _utils.bind : arguments[1];

  hook(null, { presets: ['es2015', 'stage-0'], only: [/fly-[-\w]+\/[-\w]+\./, /[fF]lyfile\.js/] });
  return (0, _utils.filter)(load((0, _path.join)(path, "package")), function (name) {
    return { name: name, plugin: load((0, _path.join)(path, "node_modules", name)) };
  });
  function load(file) {
    try {
      return require(file);
    } catch (e) {
      (0, _utils.alert)("" + e.message);
    }
  }
}