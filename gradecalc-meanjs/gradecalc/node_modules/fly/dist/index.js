"use strict";

var _co = require("co");

var _co2 = _interopRequireDefault(_co);

var _cli = require("./cli");

var cli = _interopRequireWildcard(_cli);

var _reporter = require("./reporter");

var _reporter2 = _interopRequireDefault(_reporter);

var _utils = require("./utils");

var _updateNotifier = require("update-notifier");

var _updateNotifier2 = _interopRequireDefault(_updateNotifier);

var _package = require("../package");

var _package2 = _interopRequireDefault(_package);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _co2.default)(regeneratorRuntime.mark(function _callee() {
  var _cli$options, help, list, file, version, tasks, fly;

  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          (0, _updateNotifier2.default)({ pkg: _package2.default }).notify();
          _cli$options = cli.options();
          help = _cli$options.help;
          list = _cli$options.list;
          file = _cli$options.file;
          version = _cli$options.version;
          tasks = _cli$options.tasks;

          if (!help) {
            _context.next = 11;
            break;
          }

          cli.help();
          _context.next = 23;
          break;

        case 11:
          if (!version) {
            _context.next = 15;
            break;
          }

          cli.version(_package2.default);
          _context.next = 23;
          break;

        case 15:
          _context.next = 17;
          return cli.spawn(file);

        case 17:
          fly = _context.sent;

          if (!list) {
            _context.next = 22;
            break;
          }

          cli.list(fly.host, { bare: list === "bare" });
          _context.next = 23;
          break;

        case 22:
          return _context.abrupt("return", _reporter2.default.call(fly).emit("fly_run", { path: fly.file }).start(tasks));

        case 23:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
})).catch(function (e) {
  if (e.code === "ENOENT") (0, _utils.error)("No Flyfile? See the Quickstart guide â†’ git.io/fly-quick");else if (e.code === "UNKNOWN_OPTION") (0, _utils.error)("Unknown Flag: -" + e.key + ". Run fly -h to see the options.");else (0, _utils.trace)(e);
});