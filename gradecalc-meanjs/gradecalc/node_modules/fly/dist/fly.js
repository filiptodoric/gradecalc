"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _co = require("co");

var _co2 = _interopRequireDefault(_co);

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

var _rimraf = require("rimraf");

var _rimraf2 = _interopRequireDefault(_rimraf);

var _mkdirp = require("mkdirp");

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _chokidar = require("chokidar");

var _chokidar2 = _interopRequireDefault(_chokidar);

var _emitter = require("./emitter");

var _emitter2 = _interopRequireDefault(_emitter);

var _concatWithSourcemaps = require("concat-with-sourcemaps");

var _concatWithSourcemaps2 = _interopRequireDefault(_concatWithSourcemaps);

var _path = require("path");

var _fs = require("mz/fs");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [resolve].map(regeneratorRuntime.mark);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _clear = (0, _utils.defer)(_rimraf2.default);
var _ = (0, _debug2.default)("fly");

module.exports = function (_Emitter) {
  _inherits(Fly, _Emitter);

  /**
    Create a new Fly instance.
    @param {String} flyfile path
    @param {Object} flyfile module
    @param {[Function]} array of plugins
  */

  function Fly() {
    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _ref$file = _ref.file;
    var file = _ref$file === undefined ? "." : _ref$file;
    var _ref$plugins = _ref.plugins;
    var plugins = _ref$plugins === undefined ? [] : _ref$plugins;
    var _ref$host = _ref.host;
    var host = _ref$host === undefined ? {} : _ref$host;

    _classCallCheck(this, Fly);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Fly).call(this));

    /* âœˆ */
    Object.assign(_this, {
      log: _utils.log, alert: _utils.alert, error: _utils.error, defer: _utils.defer, file: file, plugins: plugins,
      root: (0, _path.dirname)(file),
      host: host instanceof Function ? Object.assign(host, { default: host }) : host,
      debug: _,
      tasks: Object.keys(host).reduce(function (_, key) {
        return Object.assign(_, _defineProperty({}, key, host[key].bind(_this)));
      }, {}),
      _: { filters: [] }
    });
    plugins.forEach(function (_ref2) {
      var name = _ref2.name;
      var plugin = _ref2.plugin;

      if (!plugin) throw new Error("Did you forget to npm i -D " + name + "?");
      if (plugin.default) plugin = plugin.default;
      plugin.call(_this, (0, _debug2.default)(name.replace("-", ":")), _("load %o", name));
    });
    _("chdir %o", _this.root);
    process.chdir(_this.root);
    return _this;
  }

  /**
    Compose a new yieldable sequence.
    Reset globs, filters and writer.
    @param {...String} glob patterns
    @return Fly instance. Promises resolve to { file, source }
   */


  _createClass(Fly, [{
    key: "source",
    value: function source() {
      for (var _len = arguments.length, globs = Array(_len), _key = 0; _key < _len; _key++) {
        globs[_key] = arguments[_key];
      }

      Object.assign(this, { _: { filters: [], globs: (0, _utils.flatten)(globs) } });
      this._.cat = undefined;
      _("source %o", this._.globs);
      return this;
    }

    /**
      Add filter / transform function.
      Create a closure bound to the current Fly instance.
      @param {String|Function} name or filter callback
      @param [{Function}] callback with the signature (cb, options) => {}
    */

  }, {
    key: "filter",
    value: function filter(name, cb) {
      if (name instanceof Function) this.filter({ cb: name });else if ((typeof name === "undefined" ? "undefined" : _typeof(name)) === "object") this._.filters.push(name);else {
        if (this[name] instanceof Function) throw new RangeError(name + " method already defined in instance.");
        this[name] = function (options) {
          for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            rest[_key2 - 1] = arguments[_key2];
          }

          (0, _debug2.default)("fly")(name + " %o, %o", options, rest);
          return this.filter({ cb: cb, options: options, rest: rest });
        };
      }
      return this;
    }

    /**
      Watch IO events in globs and run tasks.
      @param {[String]} glob patterns to observe for changes
      @param {[String]} list of tasks to run on changes
      @param {Object} start options. See Fly.proto.start
    */

  }, {
    key: "watch",
    value: function watch(globs, tasks, options) {
      var _this2 = this;

      _("watch %o", globs);
      return this.emit("fly_watch").start(tasks, options).then(function () {
        return _chokidar2.default.watch((0, _utils.flatten)([globs]), { ignoreInitial: true }).on("all", function () {
          return _this2.start(tasks, options);
        });
      });
    }

    /**
      Unwrap/expand source globs to files.
      @param {Function} onFulfilled
      @param {Function} onRejected
    */

  }, {
    key: "unwrap",
    value: function unwrap(onFulfilled, onRejected) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        return Promise.all(_this3._.globs.map(function (glob) {
          return (0, _utils.expand)(glob);
        })).then(function (files) {
          return resolve.call(_this3, files.reduce(function (arr, item) {
            return arr.concat(item);
          }));
        }).catch(reject);
      }).then(onFulfilled).catch(onRejected);
    }

    /**
      @private Execute a task.
      @param {String} name of the task
      @param {Mixed} initial value to pass into the task
      @param {Object} Fly instance the task should be bound to
    */

  }, {
    key: "exec",
    value: regeneratorRuntime.mark(function exec(task, value) {
      var inject = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];
      var start;
      return regeneratorRuntime.wrap(function exec$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _("run %o", task);
              _context.prev = 1;
              start = new Date();

              this.emit("task_start", { task: task });
              _context.next = 6;
              return this.host[task].call(inject, value);

            case 6:
              _context.t0 = _context.sent;

              if (_context.t0) {
                _context.next = 9;
                break;
              }

              _context.t0 = value;

            case 9:
              value = _context.t0;

              this.emit("task_complete", {
                task: task, duration: new Date().getTime() - start
              });
              _context.next = 16;
              break;

            case 13:
              _context.prev = 13;
              _context.t1 = _context["catch"](1);
              this.emit("task_error", { task: task, error: _context.t1 });

            case 16:
              return _context.abrupt("return", value);

            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, exec, this, [[1, 13]]);
    })

    /**
      Run one or more tasks. Each task's return value cascades on to the next
      task in a sequence.
      @param {Array} list of tasks
      @return {Promise}
     */

  }, {
    key: "start",
    value: function start() {
      var _this5 = this;

      var tasks = arguments.length <= 0 || arguments[0] === undefined ? "default" : arguments[0];

      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref3$parallel = _ref3.parallel;
      var parallel = _ref3$parallel === undefined ? false : _ref3$parallel;
      var value = _ref3.value;

      _("start %o in " + (parallel ? "parallel" : "sequence"), tasks);
      return _co2.default.call(this, regeneratorRuntime.mark(function _callee(tasks) {
        var _this4 = this;

        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, task;

        return regeneratorRuntime.wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!parallel) {
                  _context2.next = 5;
                  break;
                }

                _context2.next = 3;
                return tasks.map(function (task) {
                  return _this4.exec(task, value, Object.create(_this4));
                });

              case 3:
                _context2.next = 32;
                break;

              case 5:
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context2.prev = 8;
                _iterator = tasks[Symbol.iterator]();

              case 10:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context2.next = 18;
                  break;
                }

                task = _step.value;
                _context2.next = 14;
                return this.exec(task, value);

              case 14:
                value = _context2.sent;

              case 15:
                _iteratorNormalCompletion = true;
                _context2.next = 10;
                break;

              case 18:
                _context2.next = 24;
                break;

              case 20:
                _context2.prev = 20;
                _context2.t0 = _context2["catch"](8);
                _didIteratorError = true;
                _iteratorError = _context2.t0;

              case 24:
                _context2.prev = 24;
                _context2.prev = 25;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 27:
                _context2.prev = 27;

                if (!_didIteratorError) {
                  _context2.next = 30;
                  break;
                }

                throw _iteratorError;

              case 30:
                return _context2.finish(27);

              case 31:
                return _context2.finish(24);

              case 32:
                return _context2.abrupt("return", value);

              case 33:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee, this, [[8, 20, 24, 32], [25,, 27, 31]]);
      }), [].concat(tasks).filter(function (task) {
        return ~Object.keys(_this5.host).indexOf(task) || !_this5.emit("task_not_found", { task: task });
      }));
    }

    /**
      Deferred rimraf wrapper.
      @param {...String} paths
     */

  }, {
    key: "clear",
    value: function clear() {
      for (var _len3 = arguments.length, paths = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        paths[_key3] = arguments[_key3];
      }

      _("clear %o", paths);
      return (0, _utils.flatten)(paths).map(function (path) {
        return _clear(path);
      });
    }

    /**
      Writer based in fs/mz writeFile.
      @param {String} file name
     */

  }, {
    key: "concat",
    value: function concat(base) {
      this._.cat = new _concatWithSourcemaps2.default(false, base, "\n");
      this._.cat.base = base;
      return this;
    }

    /**
      Resolve a yieldable sequence.
      Reduce source with filters and invoke writer.
      @param {Array}  dirs  target directories
      @param {Object} depth target options, for path flattening
      @return {Promise}
     */

  }, {
    key: "target",
    value: function target(dirs) {
      var _ref4 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref4$depth = _ref4.depth;
      var depth = _ref4$depth === undefined ? -1 : _ref4$depth;

      dirs = Array.isArray(dirs) ? dirs : [dirs];

      return _co2.default.call(this, regeneratorRuntime.mark(function _callee2() {
        var _this6 = this;

        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2;

        return regeneratorRuntime.wrap(function _callee2$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context4.prev = 3;
                _loop = regeneratorRuntime.mark(function _loop() {
                  var glob, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, file, _parse, base, ext, data, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, filter, res, _base;

                  return regeneratorRuntime.wrap(function _loop$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          glob = _step2.value;
                          _iteratorNormalCompletion3 = true;
                          _didIteratorError3 = false;
                          _iteratorError3 = undefined;
                          _context3.prev = 4;
                          _context3.next = 7;
                          return (0, _utils.expand)(glob);

                        case 7:
                          _context3.t0 = Symbol.iterator;
                          _iterator3 = _context3.sent[_context3.t0]();

                        case 9:
                          if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                            _context3.next = 56;
                            break;
                          }

                          file = _step3.value;
                          _parse = (0, _path.parse)(file);
                          base = _parse.base;
                          ext = _parse.ext;
                          _context3.next = 16;
                          return (0, _fs.readFile)(file);

                        case 16:
                          data = _context3.sent;
                          _iteratorNormalCompletion4 = true;
                          _didIteratorError4 = false;
                          _iteratorError4 = undefined;
                          _context3.prev = 20;
                          _iterator4 = _this6._.filters[Symbol.iterator]();

                        case 22:
                          if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                            _context3.next = 32;
                            break;
                          }

                          filter = _step4.value;
                          _context3.next = 26;
                          return Promise.resolve(filter.cb.apply(_this6, [data, Object.assign({ filename: base }, filter.options)].concat(filter.rest)));

                        case 26:
                          res = _context3.sent;

                          data = res.code || res.js || res.css || res.data || res || data;
                          ext = res.ext || res.extension || ext;

                        case 29:
                          _iteratorNormalCompletion4 = true;
                          _context3.next = 22;
                          break;

                        case 32:
                          _context3.next = 38;
                          break;

                        case 34:
                          _context3.prev = 34;
                          _context3.t1 = _context3["catch"](20);
                          _didIteratorError4 = true;
                          _iteratorError4 = _context3.t1;

                        case 38:
                          _context3.prev = 38;
                          _context3.prev = 39;

                          if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                          }

                        case 41:
                          _context3.prev = 41;

                          if (!_didIteratorError4) {
                            _context3.next = 44;
                            break;
                          }

                          throw _iteratorError4;

                        case 44:
                          return _context3.finish(41);

                        case 45:
                          return _context3.finish(38);

                        case 46:
                          if (!_this6._.cat) {
                            _context3.next = 50;
                            break;
                          }

                          _this6._.cat.add("" + base, data);
                          _context3.next = 53;
                          break;

                        case 50:
                          _base = _path.join.apply(undefined, _toConsumableArray((0, _path.parse)(file).dir.split(_path.sep).filter(function (path) {
                            return ! ~glob.split(_path.sep).indexOf(path);
                          })).concat(["" + (0, _path.parse)(file).name + ext]));
                          _context3.next = 53;
                          return resolve(dirs, { data: data, base: _base, depth: depth });

                        case 53:
                          _iteratorNormalCompletion3 = true;
                          _context3.next = 9;
                          break;

                        case 56:
                          _context3.next = 62;
                          break;

                        case 58:
                          _context3.prev = 58;
                          _context3.t2 = _context3["catch"](4);
                          _didIteratorError3 = true;
                          _iteratorError3 = _context3.t2;

                        case 62:
                          _context3.prev = 62;
                          _context3.prev = 63;

                          if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                          }

                        case 65:
                          _context3.prev = 65;

                          if (!_didIteratorError3) {
                            _context3.next = 68;
                            break;
                          }

                          throw _iteratorError3;

                        case 68:
                          return _context3.finish(65);

                        case 69:
                          return _context3.finish(62);

                        case 70:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _loop, _this6, [[4, 58, 62, 70], [20, 34, 38, 46], [39,, 41, 45], [63,, 65, 69]]);
                });
                _iterator2 = this._.globs[Symbol.iterator]();

              case 6:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  _context4.next = 11;
                  break;
                }

                return _context4.delegateYield(_loop(), "t0", 8);

              case 8:
                _iteratorNormalCompletion2 = true;
                _context4.next = 6;
                break;

              case 11:
                _context4.next = 17;
                break;

              case 13:
                _context4.prev = 13;
                _context4.t1 = _context4["catch"](3);
                _didIteratorError2 = true;
                _iteratorError2 = _context4.t1;

              case 17:
                _context4.prev = 17;
                _context4.prev = 18;

                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }

              case 20:
                _context4.prev = 20;

                if (!_didIteratorError2) {
                  _context4.next = 23;
                  break;
                }

                throw _iteratorError2;

              case 23:
                return _context4.finish(20);

              case 24:
                return _context4.finish(17);

              case 25:
                if (!this._.cat) {
                  _context4.next = 28;
                  break;
                }

                _context4.next = 28;
                return resolve(dirs, {
                  data: this._.cat.content,
                  base: this._.cat.base,
                  write: _fs.writeFile,
                  depth: depth
                });

              case 28:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee2, this, [[3, 13, 17, 25], [18,, 20, 24]]);
      }));
    }
  }]);

  return Fly;
}(_emitter2.default);

/** Write utility to help concat and target.
  @param {String}   dirs  parent directory
  @param {String}   base  directory/file
  @param {Mixed}    data
  @param {Integer}  depth number of parent directories to keep
  @param {Function} write promisified writer function
*/
function resolve(dirs, _ref5) {
  var base = _ref5.base;
  var data = _ref5.data;
  var depth = _ref5.depth;
  var _ref5$write = _ref5.write;
  var write = _ref5$write === undefined ? _fs.writeFile : _ref5$write;

  var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, dir, _file;

  return regeneratorRuntime.wrap(function resolve$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          if (depth > -1) {
            base = dirpaths(base, depth);
          }

          _iteratorNormalCompletion5 = true;
          _didIteratorError5 = false;
          _iteratorError5 = undefined;
          _context5.prev = 4;
          _iterator5 = (0, _utils.flatten)(dirs)[Symbol.iterator]();

        case 6:
          if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
            _context5.next = 15;
            break;
          }

          dir = _step5.value;
          _file = (0, _path.join)(dir, base);

          _mkdirp2.default.sync((0, _path.dirname)(_file));
          _context5.next = 12;
          return write(_file, data);

        case 12:
          _iteratorNormalCompletion5 = true;
          _context5.next = 6;
          break;

        case 15:
          _context5.next = 21;
          break;

        case 17:
          _context5.prev = 17;
          _context5.t0 = _context5["catch"](4);
          _didIteratorError5 = true;
          _iteratorError5 = _context5.t0;

        case 21:
          _context5.prev = 21;
          _context5.prev = 22;

          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }

        case 24:
          _context5.prev = 24;

          if (!_didIteratorError5) {
            _context5.next = 27;
            break;
          }

          throw _iteratorError5;

        case 27:
          return _context5.finish(24);

        case 28:
          return _context5.finish(21);

        case 29:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked[0], this, [[4, 17, 21, 29], [22,, 24, 28]]);
}

/**
 * Shorten a directory string to # of parent dirs
 * @param  {str}  full    The original full path
 * @param  {int}  depth   The number of levels to retain
 * @return {string}
 */
function dirpaths(full, depth) {
  var arr = full.split(_path.sep);
  var len = arr.length;
  return depth == 0 ? arr[len - 1] : depth >= len ? full : arr.slice(len - 1 - depth).join(_path.sep);
}