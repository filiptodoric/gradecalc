"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.find = find;

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

var _fs = require("mz/fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _interpret = require("interpret");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked2 = [find].map(regeneratorRuntime.mark);

var _ = (0, _debug2.default)("fly:find");

/**
  Find a valid Flyfile from a given path.
  @param {String} file or path to the Flyfile
  @param {Function} use to bind require or process path
  @return {String} path to the Flyfile
*/
function find(path) {
  var bind = arguments.length <= 1 || arguments[1] === undefined ? function (_) {
    return _;
  } : arguments[1];

  var _marked, root, resolve;

  return regeneratorRuntime.wrap(function find$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          resolve = function resolve(root) {
            var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file;

            return regeneratorRuntime.wrap(function resolve$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _iteratorNormalCompletion = true;
                    _didIteratorError = false;
                    _iteratorError = undefined;
                    _context2.prev = 3;
                    _iterator = regeneratorRuntime.mark(function _callee() {
                      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, ext, _arr, _i, name;

                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _iteratorNormalCompletion2 = true;
                              _didIteratorError2 = false;
                              _iteratorError2 = undefined;
                              _context.prev = 3;
                              _iterator2 = Object.keys(_interpret.jsVariants)[Symbol.iterator]();

                            case 5:
                              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                _context.next = 19;
                                break;
                              }

                              ext = _step2.value;
                              _arr = ["Flyfile", "flyfile"];
                              _i = 0;

                            case 9:
                              if (!(_i < _arr.length)) {
                                _context.next = 16;
                                break;
                              }

                              name = _arr[_i];
                              _context.next = 13;
                              return (0, _path.join)(root, "" + name + ext);

                            case 13:
                              _i++;
                              _context.next = 9;
                              break;

                            case 16:
                              _iteratorNormalCompletion2 = true;
                              _context.next = 5;
                              break;

                            case 19:
                              _context.next = 25;
                              break;

                            case 21:
                              _context.prev = 21;
                              _context.t0 = _context["catch"](3);
                              _didIteratorError2 = true;
                              _iteratorError2 = _context.t0;

                            case 25:
                              _context.prev = 25;
                              _context.prev = 26;

                              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                              }

                            case 28:
                              _context.prev = 28;

                              if (!_didIteratorError2) {
                                _context.next = 31;
                                break;
                              }

                              throw _iteratorError2;

                            case 31:
                              return _context.finish(28);

                            case 32:
                              return _context.finish(25);

                            case 33:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, this, [[3, 21, 25, 33], [26,, 28, 32]]);
                    })()[Symbol.iterator]();

                  case 5:
                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                      _context2.next = 19;
                      break;
                    }

                    file = _step.value;
                    _context2.prev = 7;
                    _context2.next = 10;
                    return _fs2.default.stat(file);

                  case 10:
                    if (!_context2.sent) {
                      _context2.next = 12;
                      break;
                    }

                    return _context2.abrupt("return", file);

                  case 12:
                    _context2.next = 16;
                    break;

                  case 14:
                    _context2.prev = 14;
                    _context2.t0 = _context2["catch"](7);

                  case 16:
                    _iteratorNormalCompletion = true;
                    _context2.next = 5;
                    break;

                  case 19:
                    _context2.next = 25;
                    break;

                  case 21:
                    _context2.prev = 21;
                    _context2.t1 = _context2["catch"](3);
                    _didIteratorError = true;
                    _iteratorError = _context2.t1;

                  case 25:
                    _context2.prev = 25;
                    _context2.prev = 26;

                    if (!_iteratorNormalCompletion && _iterator.return) {
                      _iterator.return();
                    }

                  case 28:
                    _context2.prev = 28;

                    if (!_didIteratorError) {
                      _context2.next = 31;
                      break;
                    }

                    throw _iteratorError;

                  case 31:
                    return _context2.finish(28);

                  case 32:
                    return _context2.finish(25);

                  case 33:
                    throw { code: "ENOENT" };

                  case 34:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _marked[0], this, [[3, 21, 25, 33], [7, 14], [26,, 28, 32]]);
          };

          _marked = [resolve].map(regeneratorRuntime.mark);

          _("resolve path to flyfile %o", path);
          root = (0, _path.join)(process.cwd(), path);
          _context3.next = 6;
          return _fs2.default.stat(path);

        case 6:
          if (!_context3.sent.isDirectory()) {
            _context3.next = 12;
            break;
          }

          _context3.next = 9;
          return resolve(root);

        case 9:
          _context3.t0 = _context3.sent;
          _context3.next = 13;
          break;

        case 12:
          _context3.t0 = root;

        case 13:
          _context3.t1 = _context3.t0;
          return _context3.abrupt("return", bind(_context3.t1));

        case 15:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2[0], this);
}